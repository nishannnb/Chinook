@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.Services
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
	<Loading />
}
else
{
	<div class="form-group row mb-1">
		<label class="col-md-2 col-form-label">Search Artist :</label>
		<input type="text" id="search" @bind="artistName" class="col-md-5" placeholder="Artist">
		<button type="button" class="btn btn-secondary col-md-2" @onclick="OnSearch">Search</button>
	</div>

	<table class="table table-striped table-hover table-sm">
		<thead>
			<tr>
				<th>Name</th>
				<th>Number of albums</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var artist in Artists)
			{
				<tr>
					<td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
					<td>@artist.Albums.Count()</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<Artist> Artists;
	private string artistName = string.Empty;
	[Inject] IArtist iArtist { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await InvokeAsync(StateHasChanged);
		Artists = await GetArtists();
	}

	private async void OnSearch()
	{
		if (artistName != string.Empty)
		{
			Artists = GetArtistsByArtistName(artistName);
		}
		else
		{
			Artists = await GetArtists();
		}
	}

	public List<Artist> GetArtistsByArtistName(string artistName)
	{
		return iArtist.GetArtistsByArtistName(artistName);
	}

	public async Task<List<Artist>> GetArtists()
	{
		return await iArtist.GetArtists();
	}

	public async Task<List<Album>> GetAlbumsForArtist(int artistId)
	{
		return await iArtist.GetAlbumsByArtistId(artistId);
	}
}
